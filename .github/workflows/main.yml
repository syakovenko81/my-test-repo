name: Check CODEOWNERS for Committer

on:
  pull_request:
    branches:
      - main
    paths:
      - 'templates/ADO/**'
      - 'templates/ServiceNow/**'

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  add_text:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v1
      - uses: actions/setup-node@v1
      
      - name: Add text to file
        run: |
          echo "@user1" >> 1.txt
      - name: Update resources
        uses: test-room-7/action-update-file@v1
        with:
          file-path: 1.txt
          commit-msg: Update resources
          github-token: ${{ secrets.GH_PAT }}

# jobs:
#   file_changes:
#     name: File changes
#     runs-on: ubuntu-latest

#     steps:
#       - uses: actions/checkout@v2
#         with:
#           fetch-depth: 2

#       - name: Get Changed Files
#         id: changed_files
#         run: |
#           changed_files=$(git diff --diff-filter=ACMRT "${{ github.sha }}"^ -- templates/ | xargs)
#           echo "::set-output name=files::$(git diff-tree --no-commit-id --name-only --diff-filter=ACMRT -r "${{ github.sha }}" -- templates/ | xargs)"
#           echo "::set-output name=username::$(git log -1 --pretty=format:'%ae' | awk -F "+" '{print $2}' | awk -F "@" '{print $1}' | tr '[:upper:]' '[:lower:]')"
#           file_mode=$(echo "$changed_files" | grep -o 'new file mode' || true)
#           if [ -n "$file_mode" ]; then
#             echo "$file_mode"
#             echo "$files"
#             echo "::set-output name=mode::new"
#           else
#             echo "$file_mode"
#             echo "$files"
#             echo "::set-output name=mode::changed"
#           fi
#     outputs:
#         mode: ${{ steps.changed_files.outputs.mode }}
#         files: ${{ steps.changed_files.outputs.files }}
#         username: ${{ steps.changed_files.outputs.username }}
        

#   sync_to_s3_for_exist_files:
#     # if: ${{ needs.file_changes.outputs.mode != 'new' }}
#     runs-on: ubuntu-latest
#     needs: file_changes

#     steps:
#       - name: Update
#         uses: actions/github-script@v6
        
#       - name: Modify File
#         run: |
#           # Perform file modifications using any command-line tools or scripts
#           echo "Adding content to file" >> 1.txt

#       - name: Commit Changes
#         run: |
#           git config --global user.email "actions@github.com"
#           git config --global user.name "GitHub Actions"
#           git add 1.txt
#           git commit -m "Update file in pull request"
#           git push origin ${{ github.head_ref }}


#       - name: Sync ADO templates to S3
#         run: |
#           echo "aws s3 sync templates/ADO/ s3://tf-s3-ado-snow-sync-staging/ADO/"
        

#       - name: Sync ServiceNow templates to S3
#         run: |
#           echo "aws s3 sync templates/ServiceNow/ s3://tf-s3-ado-snow-sync-staging/ServiceNow/"

  # sync_to_s3_for_new_files:
  #   if: ${{ needs.file_changes.outputs.mode == 'new' }}
  #   runs-on: ubuntu-latest
  #   needs: file_changes
      
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2

  #     - uses: actions/setup-node@v3
  #       with:
  #         node-version: '18'
                   
  #     - name: Sync ADO templates to S3
  #       run: |
  #         echo "aws s3 sync templates/ADO/ s3://tf-s3-ado-snow-sync-staging/ADO/"
          
  #     - name: Sync ServiceNow templates to S3
  #       run: |
  #         echo "aws s3 sync templates/ServiceNow/ s3://tf-s3-ado-snow-sync-staging/ServiceNow/"
          
# ################
#   check-codeowners:
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Get Committer Username
#         id: committer_username
#         run: |
#           git log -1 --pretty=format:'%ae' | awk -F "+" '{print $2}' | awk -F "@" '{print $1}' | tr '[:upper:]' '[:lower:]'
#           echo "::set-output name=username::$(git log -1 --pretty=format:'%ae' | awk -F "+" '{print $2}' | awk -F "@" '{print $1}' | tr '[:upper:]' '[:lower:]')"
#           # Extracts the GitHub username associated with the latest commit

#       - name: Check if Committer is in CODEOWNERS
#         id: check_codeowners
#         run: |
#           committer_username="${{ steps.committer_username.outputs.username }}"
#           echo $committer_username
#           owners=$(awk '/^\*.*@/ {print $2}' CODEOWNERS)
#           if echo "$owners" | grep -qw "$committer_username"; then
#             echo "Committer is in CODEOWNERS"
#             echo "::set-output name=mode::true"
#           else
#             echo "Committer is not in CODEOWNERS"
#             echo "::set-output name=mode::false"
#           fi
#   job2:
#     if: ${{ needs.file_changes.outputs.mode != 'true' }}
#     runs-on: ubuntu-latest

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v2

#       - name: Get Committer Username
#         id: committer_username
#         run: |
#           git log -1 --pretty=format:'%ae' | awk -F "+" '{print $2}' | awk -F "@" '{print $1}' | tr '[:upper:]' '[:lower:]'
#           echo "::set-output name=username::$(git log -1 --pretty=format:'%ae' | awk -F "+" '{print $2}' | awk -F "@" '{print $1}' | tr '[:upper:]' '[:lower:]')"
#           # Extracts the GitHub username associated with the latest commit

#       - name: Check if Committer is in CODEOWNERS
#         id: check_codeowners
#         run: |
#           committer_username="${{ steps.committer_username.outputs.username }}"
#           echo $committer_username
#           owners=$(awk '/^\*.*@/ {print $2}' CODEOWNERS)
#           if echo "$owners" | grep -qw "$committer_username"; then
#             echo "Committer is in CODEOWNERS"
#           else
#             echo "Committer is not in CODEOWNERS"
#           fi
  

